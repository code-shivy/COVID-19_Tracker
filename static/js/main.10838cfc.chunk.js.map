{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Charts.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10838cfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1fJZI\",\"card\":\"Cards_card__3InVa\",\"infected\":\"Cards_infected__y7Wb7\",\"recovered\":\"Cards_recovered__1oG0f\",\"deaths\":\"Cards_deaths__e6P_-\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) =>{\r\n    if (!confirmed){\r\n        return \"Loading...\";\r\n    }\r\n    //console.log(props);\r\n    return (     \r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}> \r\n\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\r\n                        <Typography variant=\"h5\"> \r\n                            <CountUp start={0} end={confirmed.value} duration ={2.5} separator=\",\"/> \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\"> Number of Active Cases COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Recovered </Typography>\r\n                        <CountUp start={0} end={recovered.value} duration ={2.5} separator=\",\"/> \r\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\"> Number of Recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> Deaths </Typography>\r\n                        <CountUp start={0} end={deaths.value} duration ={2.5} separator=\",\"/> \r\n                        <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\"> Number of Deaths from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import  axios from 'axios';\r\n\r\nconst url='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const { data : {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n        return {confirmed, recovered, deaths, lastUpdate };\r\n\r\n        //console.log(response);\r\n        //return response;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async() =>{\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n        //console.log(data)\r\n    }\r\n    catch (error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() =>{\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name); \r\n    }\r\n\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport styles from './Charts.module.css';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nconst Chart = ({data, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    \r\n    useEffect (() => {\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        // console.log(dailyData);\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        //console.log(dailyData);\r\n        dailyData.length\r\n        ?(<Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date), \r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n                }],\r\n            }} />) : null\r\n    );\r\n\r\n    console.log(data.confirmed, data.recovered, data.deaths);\r\n\r\n    const barChart = (\r\n        data.confirmed\r\n        ? (\r\n            <Bar\r\n                    data = {{\r\n                        labels:['Infected','Recovered','Deaths'],\r\n                        datasets:[{\r\n                            label:'People',\r\n                            backgroundColor : ['rgba(55, 55, 241, 0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n                            data: [data.confirmed.value, data.recovered.value, data.deaths.value] \r\n                        }]\r\n                    }}\r\n\r\n                \r\n\r\n                options = {{\r\n                    legend:{display:false},\r\n                    title: {display:true, text:`Current state in ${country}`},\r\n                }}\r\n            \r\n            />\r\n         ) : null\r\n    )\r\n\r\n    return (  \r\n        \r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n\r\n               \r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\nimport {NativeSelect, FormControl } from '@material-ui/core';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const[ fetchedCountries, setFetchedCountries ] = useState([]); \r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);    \r\n    \r\n        //console.log(fetchedCountries);\r\n    return (        \r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"global\"> Global </option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}> {country} </option>)}\r\n            </NativeSelect> \r\n        </FormControl>        \r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\nimport {Cards,Chart,CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\n\r\nclass App extends React.Component{\r\n\r\n    state={\r\n            data:{},\r\n            country:'',\r\n    }\r\n\r\n    \r\n\r\n    async componentDidMount(){\r\n        const fetchedData=await fetchData();\r\n        //console.log(data);\r\n        this.setState({data : fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n       // console.log(country);\r\n        const fetchedData=await fetchData(country);\r\n        //console.log(fetchedData);\r\n        this.setState({data : fetchedData, country: country});\r\n\r\n    }\r\n    render(){\r\n        const {data,country} = this.state;\r\n    \r\n        return(\r\n            <div className={styles.container}>\r\n                    <Cards data={data}/>\r\n                    <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                    <Chart data={data} country={country}/>  \r\n                                  \r\n                \r\n\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__2gM3m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__5oaU-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3nxlc\"};"],"sourceRoot":""}